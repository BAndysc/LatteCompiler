//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Latte.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LatteAntlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class LatteParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, COMMENT=35, MULTICOMMENT=36, INT=37, ID=38, 
		WS=39, STR=40;
	public const int
		RULE_program = 0, RULE_topDef = 1, RULE_fieldDef = 2, RULE_arg = 3, RULE_block = 4, 
		RULE_stmt = 5, RULE_type_ = 6, RULE_item = 7, RULE_expr = 8, RULE_unOp = 9, 
		RULE_addOp = 10, RULE_mulOp = 11, RULE_relOp = 12;
	public static readonly string[] ruleNames = {
		"program", "topDef", "fieldDef", "arg", "block", "stmt", "type_", "item", 
		"expr", "unOp", "addOp", "mulOp", "relOp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'class'", "'{'", "'}'", "';'", "','", "'='", "'++'", 
		"'--'", "'return'", "'if'", "'else'", "'while'", "'int'", "'string'", 
		"'boolean'", "'void'", "'&&'", "'||'", "'true'", "'false'", "'-'", "'!'", 
		"'+'", "'*'", "'/'", "'%'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "COMMENT", 
		"MULTICOMMENT", "INT", "ID", "WS", "STR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Latte.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LatteParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LatteParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LatteParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public TopDefContext[] topDef() {
			return GetRuleContexts<TopDefContext>();
		}
		public TopDefContext topDef(int i) {
			return GetRuleContext<TopDefContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 26; topDef();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopDefContext : ParserRuleContext {
		public TopDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topDef; } }
	 
		public TopDefContext() { }
		public virtual void CopyFrom(TopDefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDefContext : TopDefContext {
		public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public FunctionDefContext(TopDefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDefContext : TopDefContext {
		public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public FieldDefContext[] fieldDef() {
			return GetRuleContexts<FieldDefContext>();
		}
		public FieldDefContext fieldDef(int i) {
			return GetRuleContext<FieldDefContext>(i);
		}
		public ClassDefContext(TopDefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopDefContext topDef() {
		TopDefContext _localctx = new TopDefContext(Context, State);
		EnterRule(_localctx, 2, RULE_topDef);
		int _la;
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
			case T__15:
			case T__16:
			case T__17:
				_localctx = new FunctionDefContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 31; type_();
				State = 32; Match(ID);
				State = 33; Match(T__0);
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) {
					{
					State = 34; arg();
					}
				}

				State = 37; Match(T__1);
				State = 38; block();
				}
				break;
			case T__2:
				_localctx = new ClassDefContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 40; Match(T__2);
				State = 41; Match(ID);
				State = 42; Match(T__3);
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) {
					{
					{
					State = 43; fieldDef();
					}
					}
					State = 48;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 49; Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefContext : ParserRuleContext {
		public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public FieldDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterFieldDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitFieldDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefContext fieldDef() {
		FieldDefContext _localctx = new FieldDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_fieldDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; type_();
			State = 53; Match(ID);
			State = 54; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		public ITerminalNode[] ID() { return GetTokens(LatteParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(LatteParser.ID, i);
		}
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 6, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; type_();
			State = 57; Match(ID);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 58; Match(T__6);
				State = 59; type_();
				State = 60; Match(ID);
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(T__3);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__5) | (1L << T__10) | (1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << INT) | (1L << ID) | (1L << STR))) != 0)) {
				{
				{
				State = 68; stmt();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssContext : StmtContext {
		public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterAss(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitAss(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecrContext : StmtContext {
		public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public DecrContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterDecr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitDecr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RetContext : StmtContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RetContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterRet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitRet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyContext : StmtContext {
		public EmptyContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondContext : StmtContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public CondContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondElseContext : StmtContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public CondElseContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VRetContext : StmtContext {
		public VRetContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterVRet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitVRet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVRet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrContext : StmtContext {
		public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public IncrContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterIncr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitIncr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : StmtContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclContext : StmtContext {
		public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		public DeclContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : StmtContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public WhileContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SExpContext : StmtContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SExpContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterSExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitSExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_stmt);
		int _la;
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 76; Match(T__5);
				}
				break;
			case 2:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 77; block();
				}
				break;
			case 3:
				_localctx = new DeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 78; type_();
				State = 79; item();
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 80; Match(T__6);
					State = 81; item();
					}
					}
					State = 86;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 87; Match(T__5);
				}
				break;
			case 4:
				_localctx = new AssContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 89; Match(ID);
				State = 90; Match(T__7);
				State = 91; expr(0);
				State = 92; Match(T__5);
				}
				break;
			case 5:
				_localctx = new IncrContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 94; Match(ID);
				State = 95; Match(T__8);
				State = 96; Match(T__5);
				}
				break;
			case 6:
				_localctx = new DecrContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 97; Match(ID);
				State = 98; Match(T__9);
				State = 99; Match(T__5);
				}
				break;
			case 7:
				_localctx = new RetContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 100; Match(T__10);
				State = 101; expr(0);
				State = 102; Match(T__5);
				}
				break;
			case 8:
				_localctx = new VRetContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 104; Match(T__10);
				State = 105; Match(T__5);
				}
				break;
			case 9:
				_localctx = new CondContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 106; Match(T__11);
				State = 107; Match(T__0);
				State = 108; expr(0);
				State = 109; Match(T__1);
				State = 110; stmt();
				}
				break;
			case 10:
				_localctx = new CondElseContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 112; Match(T__11);
				State = 113; Match(T__0);
				State = 114; expr(0);
				State = 115; Match(T__1);
				State = 116; stmt();
				State = 117; Match(T__12);
				State = 118; stmt();
				}
				break;
			case 11:
				_localctx = new WhileContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 120; Match(T__13);
				State = 121; Match(T__0);
				State = 122; expr(0);
				State = 123; Match(T__1);
				State = 124; stmt();
				}
				break;
			case 12:
				_localctx = new SExpContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 126; expr(0);
				State = 127; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
	 
		public Type_Context() { }
		public virtual void CopyFrom(Type_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class StrContext : Type_Context {
		public StrContext(Type_Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitStr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : Type_Context {
		public BoolContext(Type_Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VoidContext : Type_Context {
		public VoidContext(Type_Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterVoid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitVoid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : Type_Context {
		public IntContext(Type_Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 12, RULE_type_);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; Match(T__14);
				}
				break;
			case T__15:
				_localctx = new StrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; Match(T__15);
				}
				break;
			case T__16:
				_localctx = new BoolContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 133; Match(T__16);
				}
				break;
			case T__17:
				_localctx = new VoidContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 134; Match(T__17);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 14, RULE_item);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 137; Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 138; Match(ID);
				State = 139; Match(T__7);
				State = 140; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EIdContext : ExprContext {
		public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public EIdContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EFunCallContext : ExprContext {
		public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EFunCallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEFunCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEFunCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEFunCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ERelOpContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelOpContext relOp() {
			return GetRuleContext<RelOpContext>(0);
		}
		public ERelOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterERelOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitERelOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitERelOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ETrueContext : ExprContext {
		public ETrueContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterETrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitETrue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitETrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EOrContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EIntContext : ExprContext {
		public ITerminalNode INT() { return GetToken(LatteParser.INT, 0); }
		public EIntContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EUnOpContext : ExprContext {
		public UnOpContext unOp() {
			return GetRuleContext<UnOpContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EUnOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEUnOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEUnOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEUnOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EStrContext : ExprContext {
		public ITerminalNode STR() { return GetToken(LatteParser.STR, 0); }
		public EStrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEStr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EMulOpContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulOpContext mulOp() {
			return GetRuleContext<MulOpContext>(0);
		}
		public EMulOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEMulOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEMulOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEMulOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EAndContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EParenContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EParenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEParen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EFalseContext : ExprContext {
		public EFalseContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEFalse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EAddOpContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public EAddOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new EUnOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 144; unOp();
				State = 145; expr(13);
				}
				break;
			case 2:
				{
				_localctx = new EIdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 147; Match(ID);
				}
				break;
			case 3:
				{
				_localctx = new EIntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 148; Match(INT);
				}
				break;
			case 4:
				{
				_localctx = new ETrueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 149; Match(T__20);
				}
				break;
			case 5:
				{
				_localctx = new EFalseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 150; Match(T__21);
				}
				break;
			case 6:
				{
				_localctx = new EFunCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 151; Match(ID);
				State = 152; Match(T__0);
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << INT) | (1L << ID) | (1L << STR))) != 0)) {
					{
					State = 153; expr(0);
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__6) {
						{
						{
						State = 154; Match(T__6);
						State = 155; expr(0);
						}
						}
						State = 160;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 163; Match(T__1);
				}
				break;
			case 7:
				{
				_localctx = new EStrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 164; Match(STR);
				}
				break;
			case 8:
				{
				_localctx = new EParenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 165; Match(T__0);
				State = 166; expr(0);
				State = 167; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 189;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new EMulOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 171;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 172; mulOp();
						State = 173; expr(13);
						}
						break;
					case 2:
						{
						_localctx = new EAddOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 175;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 176; addOp();
						State = 177; expr(12);
						}
						break;
					case 3:
						{
						_localctx = new ERelOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 179;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 180; relOp();
						State = 181; expr(11);
						}
						break;
					case 4:
						{
						_localctx = new EAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 183;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 184; Match(T__18);
						State = 185; expr(9);
						}
						break;
					case 5:
						{
						_localctx = new EOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 186;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 187; Match(T__19);
						State = 188; expr(8);
						}
						break;
					}
					} 
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnOpContext : ParserRuleContext {
		public UnOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unOp; } }
	 
		public UnOpContext() { }
		public virtual void CopyFrom(UnOpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryNegContext : UnOpContext {
		public UnaryNegContext(UnOpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterUnaryNeg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitUnaryNeg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNeg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusContext : UnOpContext {
		public UnaryMinusContext(UnOpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterUnaryMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitUnaryMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnOpContext unOp() {
		UnOpContext _localctx = new UnOpContext(Context, State);
		EnterRule(_localctx, 18, RULE_unOp);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				_localctx = new UnaryMinusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 194; Match(T__22);
				}
				break;
			case T__23:
				_localctx = new UnaryNegContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 195; Match(T__23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
	 
		public AddOpContext() { }
		public virtual void CopyFrom(AddOpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PlusContext : AddOpContext {
		public PlusContext(AddOpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusContext : AddOpContext {
		public MinusContext(AddOpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(Context, State);
		EnterRule(_localctx, 20, RULE_addOp);
		try {
			State = 200;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				_localctx = new PlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 198; Match(T__24);
				}
				break;
			case T__22:
				_localctx = new MinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; Match(T__22);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulOpContext : ParserRuleContext {
		public MulOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulOp; } }
	 
		public MulOpContext() { }
		public virtual void CopyFrom(MulOpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivideContext : MulOpContext {
		public DivideContext(MulOpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloContext : MulOpContext {
		public ModuloContext(MulOpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyContext : MulOpContext {
		public MultiplyContext(MulOpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulOpContext mulOp() {
		MulOpContext _localctx = new MulOpContext(Context, State);
		EnterRule(_localctx, 22, RULE_mulOp);
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				_localctx = new MultiplyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 202; Match(T__25);
				}
				break;
			case T__26:
				_localctx = new DivideContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; Match(T__26);
				}
				break;
			case T__27:
				_localctx = new ModuloContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 204; Match(T__27);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelOpContext : ParserRuleContext {
		public RelOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relOp; } }
	 
		public RelOpContext() { }
		public virtual void CopyFrom(RelOpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessThanContext : RelOpContext {
		public LessThanContext(RelOpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterLessThan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitLessThan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualsContext : RelOpContext {
		public EqualsContext(RelOpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterEqualsContext : RelOpContext {
		public GreaterEqualsContext(RelOpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterGreaterEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitGreaterEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanContext : RelOpContext {
		public GreaterThanContext(RelOpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterGreaterThan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitGreaterThan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessEqualsContext : RelOpContext {
		public LessEqualsContext(RelOpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterLessEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitLessEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualsContext : RelOpContext {
		public NotEqualsContext(RelOpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterNotEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitNotEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEquals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelOpContext relOp() {
		RelOpContext _localctx = new RelOpContext(Context, State);
		EnterRule(_localctx, 24, RULE_relOp);
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				_localctx = new LessThanContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 207; Match(T__28);
				}
				break;
			case T__29:
				_localctx = new LessEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 208; Match(T__29);
				}
				break;
			case T__30:
				_localctx = new GreaterThanContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 209; Match(T__30);
				}
				break;
			case T__31:
				_localctx = new GreaterEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 210; Match(T__31);
				}
				break;
			case T__32:
				_localctx = new EqualsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 211; Match(T__32);
				}
				break;
			case T__33:
				_localctx = new NotEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 212; Match(T__33);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\xDA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x6', '\x2', '\x1E', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '\x1F', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '&', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '/', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x32', '\v', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x35', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x41', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '\x44', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', 'H', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'K', '\v', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'U', '\n', '\a', '\f', '\a', 
		'\xE', '\a', 'X', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x84', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x8A', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x90', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', '\x9F', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'\xA2', '\v', '\n', '\x5', '\n', '\xA4', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\xAC', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xC0', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '\xC3', '\v', '\n', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\xC7', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\xCB', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xD0', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xD8', '\n', '\xE', '\x3', 
		'\xE', '\x2', '\x3', '\x12', '\xF', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x2', '\x2', '\x2', 
		'\xF9', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x4', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x36', '\x3', '\x2', '\x2', '\x2', '\b', 
		':', '\x3', '\x2', '\x2', '\x2', '\n', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x83', '\x3', '\x2', '\x2', '\x2', '\xE', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x12', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xCA', '\x3', '\x2', '\x2', '\x2', '\x18', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', 
		'\x5', '\x4', '\x3', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '!', '\"', '\x5', '\xE', '\b', '\x2', '\"', '#', 
		'\a', '(', '\x2', '\x2', '#', '%', '\a', '\x3', '\x2', '\x2', '$', '&', 
		'\x5', '\b', '\x5', '\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', '%', 
		'&', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\'', '(', '\a', '\x4', '\x2', '\x2', '(', ')', '\x5', '\n', '\x6', '\x2', 
		')', '\x35', '\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '\x5', '\x2', 
		'\x2', '+', ',', '\a', '(', '\x2', '\x2', ',', '\x30', '\a', '\x6', '\x2', 
		'\x2', '-', '/', '\x5', '\x6', '\x4', '\x2', '.', '-', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x32', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x35', '\a', '\a', '\x2', '\x2', '\x34', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '*', '\x3', '\x2', '\x2', '\x2', '\x35', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\x5', '\xE', '\b', '\x2', '\x37', 
		'\x38', '\a', '(', '\x2', '\x2', '\x38', '\x39', '\a', '\b', '\x2', '\x2', 
		'\x39', '\a', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x5', '\xE', '\b', 
		'\x2', ';', '\x42', '\a', '(', '\x2', '\x2', '<', '=', '\a', '\t', '\x2', 
		'\x2', '=', '>', '\x5', '\xE', '\b', '\x2', '>', '?', '\a', '(', '\x2', 
		'\x2', '?', '\x41', '\x3', '\x2', '\x2', '\x2', '@', '<', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x44', '\x3', '\x2', '\x2', '\x2', '\x42', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\t', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x45', 'I', '\a', '\x6', '\x2', '\x2', '\x46', 'H', '\x5', 
		'\f', '\a', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'K', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 
		'J', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\a', '\x2', '\x2', 
		'M', '\v', '\x3', '\x2', '\x2', '\x2', 'N', '\x84', '\a', '\b', '\x2', 
		'\x2', 'O', '\x84', '\x5', '\n', '\x6', '\x2', 'P', 'Q', '\x5', '\xE', 
		'\b', '\x2', 'Q', 'V', '\x5', '\x10', '\t', '\x2', 'R', 'S', '\a', '\t', 
		'\x2', '\x2', 'S', 'U', '\x5', '\x10', '\t', '\x2', 'T', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\b', 
		'\x2', '\x2', 'Z', '\x84', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', 
		'(', '\x2', '\x2', '\\', ']', '\a', '\n', '\x2', '\x2', ']', '^', '\x5', 
		'\x12', '\n', '\x2', '^', '_', '\a', '\b', '\x2', '\x2', '_', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', '(', '\x2', '\x2', '\x61', 
		'\x62', '\a', '\v', '\x2', '\x2', '\x62', '\x84', '\a', '\b', '\x2', '\x2', 
		'\x63', '\x64', '\a', '(', '\x2', '\x2', '\x64', '\x65', '\a', '\f', '\x2', 
		'\x2', '\x65', '\x84', '\a', '\b', '\x2', '\x2', '\x66', 'g', '\a', '\r', 
		'\x2', '\x2', 'g', 'h', '\x5', '\x12', '\n', '\x2', 'h', 'i', '\a', '\b', 
		'\x2', '\x2', 'i', '\x84', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', 
		'\r', '\x2', '\x2', 'k', '\x84', '\a', '\b', '\x2', '\x2', 'l', 'm', '\a', 
		'\xE', '\x2', '\x2', 'm', 'n', '\a', '\x3', '\x2', '\x2', 'n', 'o', '\x5', 
		'\x12', '\n', '\x2', 'o', 'p', '\a', '\x4', '\x2', '\x2', 'p', 'q', '\x5', 
		'\f', '\a', '\x2', 'q', '\x84', '\x3', '\x2', '\x2', '\x2', 'r', 's', 
		'\a', '\xE', '\x2', '\x2', 's', 't', '\a', '\x3', '\x2', '\x2', 't', 'u', 
		'\x5', '\x12', '\n', '\x2', 'u', 'v', '\a', '\x4', '\x2', '\x2', 'v', 
		'w', '\x5', '\f', '\a', '\x2', 'w', 'x', '\a', '\xF', '\x2', '\x2', 'x', 
		'y', '\x5', '\f', '\a', '\x2', 'y', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\a', '\x10', '\x2', '\x2', '{', '|', '\a', '\x3', '\x2', '\x2', 
		'|', '}', '\x5', '\x12', '\n', '\x2', '}', '~', '\a', '\x4', '\x2', '\x2', 
		'~', '\x7F', '\x5', '\f', '\a', '\x2', '\x7F', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x5', '\x12', '\n', '\x2', '\x81', '\x82', '\a', 
		'\b', '\x2', '\x2', '\x82', '\x84', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'N', '\x3', '\x2', '\x2', '\x2', '\x83', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x83', 'P', '\x3', '\x2', '\x2', '\x2', '\x83', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '`', '\x3', '\x2', '\x2', '\x2', '\x83', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x66', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'j', '\x3', '\x2', '\x2', '\x2', '\x83', 'l', '\x3', '\x2', '\x2', '\x2', 
		'\x83', 'r', '\x3', '\x2', '\x2', '\x2', '\x83', 'z', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x80', '\x3', '\x2', '\x2', '\x2', '\x84', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x8A', '\a', '\x11', '\x2', '\x2', '\x86', 
		'\x8A', '\a', '\x12', '\x2', '\x2', '\x87', '\x8A', '\a', '\x13', '\x2', 
		'\x2', '\x88', '\x8A', '\a', '\x14', '\x2', '\x2', '\x89', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x86', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x89', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\xF', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x90', '\a', 
		'(', '\x2', '\x2', '\x8C', '\x8D', '\a', '(', '\x2', '\x2', '\x8D', '\x8E', 
		'\a', '\n', '\x2', '\x2', '\x8E', '\x90', '\x5', '\x12', '\n', '\x2', 
		'\x8F', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x11', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\b', '\n', '\x1', '\x2', '\x92', '\x93', '\x5', '\x14', '\v', '\x2', 
		'\x93', '\x94', '\x5', '\x12', '\n', '\xF', '\x94', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\xAC', '\a', '(', '\x2', '\x2', '\x96', '\xAC', 
		'\a', '\'', '\x2', '\x2', '\x97', '\xAC', '\a', '\x17', '\x2', '\x2', 
		'\x98', '\xAC', '\a', '\x18', '\x2', '\x2', '\x99', '\x9A', '\a', '(', 
		'\x2', '\x2', '\x9A', '\xA3', '\a', '\x3', '\x2', '\x2', '\x9B', '\xA0', 
		'\x5', '\x12', '\n', '\x2', '\x9C', '\x9D', '\a', '\t', '\x2', '\x2', 
		'\x9D', '\x9F', '\x5', '\x12', '\n', '\x2', '\x9E', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xAC', '\a', '\x4', '\x2', '\x2', '\xA6', '\xAC', '\a', '*', 
		'\x2', '\x2', '\xA7', '\xA8', '\a', '\x3', '\x2', '\x2', '\xA8', '\xA9', 
		'\x5', '\x12', '\n', '\x2', '\xA9', '\xAA', '\a', '\x4', '\x2', '\x2', 
		'\xAA', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAB', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\x95', '\x3', '\x2', '\x2', '\x2', '\xAB', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\x98', '\x3', '\x2', '\x2', '\x2', '\xAB', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xAE', '\f', '\xE', '\x2', '\x2', '\xAE', '\xAF', '\x5', '\x18', 
		'\r', '\x2', '\xAF', '\xB0', '\x5', '\x12', '\n', '\xF', '\xB0', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\f', '\r', '\x2', '\x2', 
		'\xB2', '\xB3', '\x5', '\x16', '\f', '\x2', '\xB3', '\xB4', '\x5', '\x12', 
		'\n', '\xE', '\xB4', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', 
		'\f', '\f', '\x2', '\x2', '\xB6', '\xB7', '\x5', '\x1A', '\xE', '\x2', 
		'\xB7', '\xB8', '\x5', '\x12', '\n', '\r', '\xB8', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBA', '\f', '\v', '\x2', '\x2', '\xBA', '\xBB', 
		'\a', '\x15', '\x2', '\x2', '\xBB', '\xC0', '\x5', '\x12', '\n', '\v', 
		'\xBC', '\xBD', '\f', '\n', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x16', 
		'\x2', '\x2', '\xBE', '\xC0', '\x5', '\x12', '\n', '\n', '\xBF', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\xBF', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xBF', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC7', 
		'\a', '\x19', '\x2', '\x2', '\xC5', '\xC7', '\a', '\x1A', '\x2', '\x2', 
		'\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\x15', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB', 
		'\a', '\x1B', '\x2', '\x2', '\xC9', '\xCB', '\a', '\x19', '\x2', '\x2', 
		'\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\x17', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xD0', 
		'\a', '\x1C', '\x2', '\x2', '\xCD', '\xD0', '\a', '\x1D', '\x2', '\x2', 
		'\xCE', '\xD0', '\a', '\x1E', '\x2', '\x2', '\xCF', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xD8', '\a', '\x1F', '\x2', '\x2', '\xD2', '\xD8', '\a', ' ', 
		'\x2', '\x2', '\xD3', '\xD8', '\a', '!', '\x2', '\x2', '\xD4', '\xD8', 
		'\a', '\"', '\x2', '\x2', '\xD5', '\xD8', '\a', '#', '\x2', '\x2', '\xD6', 
		'\xD8', '\a', '$', '\x2', '\x2', '\xD7', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD7', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x15', '\x1F', '%', 
		'\x30', '\x34', '\x42', 'I', 'V', '\x83', '\x89', '\x8F', '\xA0', '\xA3', 
		'\xAB', '\xBF', '\xC1', '\xC6', '\xCA', '\xCF', '\xD7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LatteAntlr
